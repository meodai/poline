{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/ban-ts-comment */\nexport type FuncNumberReturn = (arg0: number) => Vector2;\nexport type Vector2 = [number, number];\nexport type Vector3 = [number, ...Vector2];\nexport type PartialVector3 = [number | null, number | null, number | null];\n\n/**\n * Converts the given (x, y, z) coordinate to an HSL color\n * The (x, y) values are used to calculate the hue, while the z value is used as the saturation\n * The lightness value is calculated based on the distance of (x, y) from the center (0.5, 0.5)\n * Returns an array [hue, saturation, lightness]\n * @param xyz:Vector3 [x, y, z] coordinate array in (x, y, z) format (0-1, 0-1, 0-1)\n * @returns [hue, saturation, lightness]: Vector3 color array in HSL format (0-360, 0-1, 0-1)\n * @example\n * pointToHSL(0.5, 0.5, 1) // [0, 1, 0.5]\n * pointToHSL(0.5, 0.5, 0) // [0, 1, 0]\n * pointToHSL(0.5, 0.5, 1) // [0, 1, 1]\n **/\n\nexport const pointToHSL = (\n  xyz: Vector3,\n  invertedLightness: boolean\n): Vector3 => {\n  const [x, y, z] = xyz;\n\n  // cy and cx are the center (y and x) values\n  const cx = 0.5;\n  const cy = 0.5;\n\n  // Calculate the angle between the point (x, y) and the center (cx, cy)\n  const radians = Math.atan2(y - cy, x - cx);\n\n  // Convert the angle to degrees and shift it so that it goes from 0 to 360\n  let deg = radians * (180 / Math.PI);\n  deg = (360 + deg) % 360;\n\n  // The saturation value is taken from the z coordinate\n  const s = z;\n\n  // Calculate the lightness value based on the distance from the center\n  const dist = Math.sqrt(Math.pow(y - cy, 2) + Math.pow(x - cx, 2));\n  const l = dist / cx;\n\n  // Return the HSL color as an array [hue, saturation, lightness]\n  return [deg, s, invertedLightness ? 1 - l : l];\n};\n\n/**\n * Converts the given HSL color to an (x, y, z) coordinate\n * The hue value is used to calculate the (x, y) position, while the saturation value is used as the z coordinate\n * The lightness value is used to calculate the distance from the center (0.5, 0.5)\n * Returns an array [x, y, z]\n * @param hsl:Vector3 [hue, saturation, lightness] color array in HSL format (0-360, 0-1, 0-1)\n * @returns [x, y, z]:Vector3 coordinate array in (x, y, z) format (0-1, 0-1, 0-1)\n * @example\n * hslToPoint([0, 1, 0.5]) // [0.5, 0.5, 1]\n * hslToPoint([0, 1, 0]) // [0.5, 0.5, 1]\n * hslToPoint([0, 1, 1]) // [0.5, 0.5, 1]\n * hslToPoint([0, 0, 0.5]) // [0.5, 0.5, 0]\n **/\nexport const hslToPoint = (\n  hsl: Vector3,\n  invertedLightness: boolean\n): Vector3 => {\n  // Destructure the input array into separate hue, saturation, and lightness values\n  const [h, s, l] = hsl;\n  // cx and cy are the center (x and y) values\n  const cx = 0.5;\n  const cy = 0.5;\n  // Calculate the angle in radians based on the hue value\n  const radians = h / (180 / Math.PI);\n\n  // Calculate the distance from the center based on the lightness value\n  const dist = (invertedLightness ? 1 - l : l) * cx;\n\n  // Calculate the x and y coordinates based on the distance and angle\n  const x = cx + dist * Math.cos(radians);\n  const y = cy + dist * Math.sin(radians);\n  // The z coordinate is equal to the saturation value\n  const z = s;\n  // Return the (x, y, z) coordinate as an array [x, y, z]\n  return [x, y, z];\n};\n\nexport const randomHSLPair = (\n  startHue: number = Math.random() * 360,\n  saturations: Vector2 = [Math.random(), Math.random()],\n  lightnesses: Vector2 = [0.75 + Math.random() * 0.2, 0.3 + Math.random() * 0.2]\n): [Vector3, Vector3] => [\n  [startHue, saturations[0], lightnesses[0]],\n  [(startHue + 60 + Math.random() * 180) % 360, saturations[1], lightnesses[1]],\n];\n\nexport const randomHSLTriple = (\n  startHue: number = Math.random() * 360,\n  saturations: Vector3 = [Math.random(), Math.random(), Math.random()],\n  lightnesses: Vector3 = [\n    0.75 + Math.random() * 0.2,\n    Math.random() * 0.2,\n    0.75 + Math.random() * 0.2,\n  ]\n): [Vector3, Vector3, Vector3] => [\n  [startHue, saturations[0], lightnesses[0]],\n  [(startHue + 60 + Math.random() * 180) % 360, saturations[1], lightnesses[1]],\n  [(startHue + 60 + Math.random() * 180) % 360, saturations[2], lightnesses[2]],\n];\n\nconst vectorOnLine = (\n  t: number,\n  p1: Vector3,\n  p2: Vector3,\n  invert = false,\n  fx = (t: number, invert: boolean): number => (invert ? 1 - t : t),\n  fy = (t: number, invert: boolean): number => (invert ? 1 - t : t),\n  fz = (t: number, invert: boolean): number => (invert ? 1 - t : t)\n): Vector3 => {\n  const tModifiedX = fx(t, invert);\n  const tModifiedY = fy(t, invert);\n  const tModifiedZ = fz(t, invert);\n  const x = (1 - tModifiedX) * p1[0] + tModifiedX * p2[0];\n  const y = (1 - tModifiedY) * p1[1] + tModifiedY * p2[1];\n  const z = (1 - tModifiedZ) * p1[2] + tModifiedZ * p2[2];\n\n  return [x, y, z];\n};\n\nconst vectorsOnLine = (\n  p1: Vector3,\n  p2: Vector3,\n  numPoints = 4,\n  invert = false,\n  fx = (t: number, invert: boolean): number => (invert ? 1 - t : t),\n  fy = (t: number, invert: boolean): number => (invert ? 1 - t : t),\n  fz = (t: number, invert: boolean): number => (invert ? 1 - t : t)\n): Vector3[] => {\n  const points: Vector3[] = [];\n\n  for (let i = 0; i < numPoints; i++) {\n    const [x, y, z] = vectorOnLine(\n      i / (numPoints - 1),\n      p1,\n      p2,\n      invert,\n      fx,\n      fy,\n      fz\n    );\n    points.push([x, y, z]);\n  }\n\n  return points;\n};\n\nexport type PositionFunction = (t: number, reverse?: boolean) => number;\n\nconst linearPosition: PositionFunction = (t: number) => {\n  return t;\n};\n\nconst exponentialPosition: PositionFunction = (t: number, reverse = false) => {\n  if (reverse) {\n    return 1 - (1 - t) ** 2;\n  }\n  return t ** 2;\n};\n\nconst quadraticPosition: PositionFunction = (t: number, reverse = false) => {\n  if (reverse) {\n    return 1 - (1 - t) ** 3;\n  }\n  return t ** 3;\n};\n\nconst cubicPosition: PositionFunction = (t: number, reverse = false) => {\n  if (reverse) {\n    return 1 - (1 - t) ** 4;\n  }\n  return t ** 4;\n};\n\nconst quarticPosition: PositionFunction = (t: number, reverse = false) => {\n  if (reverse) {\n    return 1 - (1 - t) ** 5;\n  }\n  return t ** 5;\n};\n\nconst sinusoidalPosition: PositionFunction = (t: number, reverse = false) => {\n  if (reverse) {\n    return 1 - Math.sin(((1 - t) * Math.PI) / 2);\n  }\n  return Math.sin((t * Math.PI) / 2);\n};\n\nconst asinusoidalPosition: PositionFunction = (t: number, reverse = false) => {\n  if (reverse) {\n    return 1 - Math.asin(1 - t) / (Math.PI / 2);\n  }\n  return Math.asin(t) / (Math.PI / 2);\n};\n\nconst arcPosition: PositionFunction = (t: number, reverse = false) => {\n  if (reverse) {\n    return Math.sqrt(1 - (1 - t) ** 2);\n  }\n  return 1 - Math.sqrt(1 - t);\n};\n\nconst smoothStepPosition: PositionFunction = (t: number) => {\n  return t ** 2 * (3 - 2 * t);\n};\n\nexport const positionFunctions = {\n  linearPosition,\n  exponentialPosition,\n  quadraticPosition,\n  cubicPosition,\n  quarticPosition,\n  sinusoidalPosition,\n  asinusoidalPosition,\n  arcPosition,\n  smoothStepPosition,\n};\n\n/**\n * Calculates the distance between two points\n * @param p1 The first point\n * @param p2 The second point\n * @param hueMode Whether to use the hue distance function\n * @returns The distance between the two points\n * @example\n * const p1 = [0, 0, 0];\n * const p2 = [1, 1, 1];\n * const dist = distance(p1, p2);\n * console.log(dist); // 1.7320508075688772\n **/\nconst distance = (\n  p1: PartialVector3,\n  p2: PartialVector3,\n  hueMode = false\n): number => {\n  const a1 = p1[0];\n  const a2 = p2[0];\n  let diffA = 0;\n\n  if (hueMode && a1 !== null && a2 !== null) {\n    diffA = Math.min(Math.abs(a1 - a2), 360 - Math.abs(a1 - a2));\n    diffA = diffA / 360;\n  } else {\n    diffA = a1 === null || a2 === null ? 0 : a1 - a2;\n  }\n\n  const a = diffA;\n  const b = p1[1] === null || p2[1] === null ? 0 : p2[1] - p1[1];\n  const c = p1[2] === null || p2[2] === null ? 0 : p2[2] - p1[2];\n\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\nexport type ColorPointCollection = {\n  xyz?: Vector3;\n  color?: Vector3;\n  invertedLightness?: boolean;\n};\n\nclass ColorPoint {\n  public x = 0;\n  public y = 0;\n  public z = 0;\n  public color: Vector3 = [0, 0, 0];\n  private _invertedLightness = false;\n\n  constructor({ xyz, color, invertedLightness }: ColorPointCollection = {}) {\n    this._invertedLightness = invertedLightness || false;\n    this.positionOrColor({ xyz, color, invertedLightness });\n  }\n\n  positionOrColor({ xyz, color, invertedLightness }: ColorPointCollection) {\n    if (xyz && color) {\n      throw new Error(\"Point must be initialized with either x,y,z or hsl\");\n    } else if (xyz) {\n      this.x = xyz[0];\n      this.y = xyz[1];\n      this.z = xyz[2];\n      this.color = pointToHSL(\n        [this.x, this.y, this.z],\n        invertedLightness || false\n      );\n    } else if (color) {\n      this.color = color;\n      [this.x, this.y, this.z] = hslToPoint(color, invertedLightness || false);\n    }\n  }\n\n  set position([x, y, z]: Vector3) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.color = pointToHSL(\n      [this.x, this.y, this.z] as Vector3,\n      this._invertedLightness\n    );\n  }\n\n  get position(): Vector3 {\n    return [this.x, this.y, this.z];\n  }\n\n  set hsl([h, s, l]: Vector3) {\n    this.color = [h, s, l];\n    [this.x, this.y, this.z] = hslToPoint(\n      this.color as Vector3,\n      this._invertedLightness\n    );\n  }\n\n  get hsl(): Vector3 {\n    return this.color;\n  }\n\n  get hslCSS(): string {\n    const [h, s, l] = this.color;\n    return `hsl(${h.toFixed(2)}, ${(s * 100).toFixed(2)}%, ${(l * 100).toFixed(2)}%)`;\n  }\n\n  get oklchCSS(): string {\n    const [h, s, l] = this.color;\n    return `oklch(${(l * 100).toFixed(2)}% ${(s * .4).toFixed(3)} ${h.toFixed(2)})`;\n  }\n\n  get lchCSS(): string {\n    const [h, s, l] = this.color;\n    return `lch(${(l * 100).toFixed(2)}% ${(s * 150).toFixed(2)} ${h.toFixed(2)})`;\n  }\n\n  shiftHue(angle: number): void {\n    this.color[0] = (360 + (this.color[0] + angle)) % 360;\n    [this.x, this.y, this.z] = hslToPoint(\n      this.color as Vector3,\n      this._invertedLightness\n    );\n  }\n}\n\nexport type PolineOptions = {\n  anchorColors: Vector3[];\n  numPoints: number;\n  positionFunction?: (t: number, invert?: boolean) => number;\n  positionFunctionX?: (t: number, invert?: boolean) => number;\n  positionFunctionY?: (t: number, invert?: boolean) => number;\n  positionFunctionZ?: (t: number, invert?: boolean) => number;\n  invertedLightness?: boolean;\n  closedLoop?: boolean;\n};\nexport class Poline {\n  private _needsUpdate = true;\n  private _anchorPoints: ColorPoint[];\n\n  private _numPoints: number;\n  private points: ColorPoint[][];\n\n  private _positionFunctionX = sinusoidalPosition;\n  private _positionFunctionY = sinusoidalPosition;\n  private _positionFunctionZ = sinusoidalPosition;\n\n  private _anchorPairs: ColorPoint[][];\n\n  private connectLastAndFirstAnchor = false;\n\n  private _animationFrame: null | number = null;\n\n  private _invertedLightness = false;\n\n  constructor(\n    {\n      anchorColors = randomHSLPair(),\n      numPoints = 4,\n      positionFunction = sinusoidalPosition,\n      positionFunctionX,\n      positionFunctionY,\n      positionFunctionZ,\n      closedLoop,\n      invertedLightness,\n    }: PolineOptions = {\n      anchorColors: randomHSLPair(),\n      numPoints: 4,\n      positionFunction: sinusoidalPosition,\n      closedLoop: false,\n    }\n  ) {\n    if (!anchorColors || anchorColors.length < 2) {\n      throw new Error(\"Must have at least two anchor colors\");\n    }\n\n    this._anchorPoints = anchorColors.map(\n      (point) => new ColorPoint({ color: point, invertedLightness })\n    );\n\n    this._numPoints = numPoints + 2; // add two for the anchor points\n\n    this._positionFunctionX =\n      positionFunctionX || positionFunction || sinusoidalPosition;\n    this._positionFunctionY =\n      positionFunctionY || positionFunction || sinusoidalPosition;\n    this._positionFunctionZ =\n      positionFunctionZ || positionFunction || sinusoidalPosition;\n\n    this.connectLastAndFirstAnchor = closedLoop || false;\n\n    this._invertedLightness = invertedLightness || false;\n\n    this.updateAnchorPairs();\n  }\n\n  public get numPoints(): number {\n    return this._numPoints - 2;\n  }\n\n  public set numPoints(numPoints: number) {\n    if (numPoints < 1) {\n      throw new Error(\"Must have at least one point\");\n    }\n    this._numPoints = numPoints + 2; // add two for the anchor points\n    this.updateAnchorPairs();\n  }\n\n  public set positionFunction(\n    positionFunction: PositionFunction | PositionFunction[]\n  ) {\n    if (Array.isArray(positionFunction)) {\n      if (positionFunction.length !== 3) {\n        throw new Error(\"Position function array must have 3 elements\");\n      }\n      if (\n        typeof positionFunction[0] !== \"function\" ||\n        typeof positionFunction[1] !== \"function\" ||\n        typeof positionFunction[2] !== \"function\"\n      ) {\n        throw new Error(\"Position function array must have 3 functions\");\n      }\n      this._positionFunctionX = positionFunction[0];\n      this._positionFunctionY = positionFunction[1];\n      this._positionFunctionZ = positionFunction[2];\n    } else {\n      this._positionFunctionX = positionFunction;\n      this._positionFunctionY = positionFunction;\n      this._positionFunctionZ = positionFunction;\n    }\n\n    this.updateAnchorPairs();\n  }\n\n  public get positionFunction(): PositionFunction | PositionFunction[] {\n    // not to sure what to do here, because the position function is a combination of the three\n    if (\n      this._positionFunctionX === this._positionFunctionY &&\n      this._positionFunctionX === this._positionFunctionZ\n    ) {\n      return this._positionFunctionX;\n    }\n\n    return [\n      this._positionFunctionX,\n      this._positionFunctionY,\n      this._positionFunctionZ,\n    ];\n  }\n\n  public set positionFunctionX(positionFunctionX: PositionFunction) {\n    this._positionFunctionX = positionFunctionX;\n    this.updateAnchorPairs();\n  }\n\n  public get positionFunctionX(): PositionFunction {\n    return this._positionFunctionX;\n  }\n\n  public set positionFunctionY(positionFunctionY: PositionFunction) {\n    this._positionFunctionY = positionFunctionY;\n    this.updateAnchorPairs();\n  }\n\n  public get positionFunctionY(): PositionFunction {\n    return this._positionFunctionY;\n  }\n\n  public set positionFunctionZ(positionFunctionZ: PositionFunction) {\n    this._positionFunctionZ = positionFunctionZ;\n    this.updateAnchorPairs();\n  }\n\n  public get positionFunctionZ(): PositionFunction {\n    return this._positionFunctionZ;\n  }\n\n  public get anchorPoints(): ColorPoint[] {\n    return this._anchorPoints;\n  }\n\n  public set anchorPoints(anchorPoints: ColorPoint[]) {\n    this._anchorPoints = anchorPoints;\n    this.updateAnchorPairs();\n  }\n\n  public updateAnchorPairs(): void {\n    this._anchorPairs = [] as ColorPoint[][];\n\n    const anchorPointsLength = this.connectLastAndFirstAnchor\n      ? this.anchorPoints.length\n      : this.anchorPoints.length - 1;\n\n    for (let i = 0; i < anchorPointsLength; i++) {\n      const pair = [\n        this.anchorPoints[i],\n        this.anchorPoints[(i + 1) % this.anchorPoints.length],\n      ] as ColorPoint[];\n\n      this._anchorPairs.push(pair);\n    }\n\n    this.points = this._anchorPairs.map((pair, i) => {\n      const p1position = pair[0] ? pair[0].position : ([0, 0, 0] as Vector3);\n      const p2position = pair[1] ? pair[1].position : ([0, 0, 0] as Vector3);\n\n      return vectorsOnLine(\n        p1position,\n        p2position,\n        this._numPoints,\n        i % 2 ? true : false,\n        this.positionFunctionX,\n        this.positionFunctionY,\n        this.positionFunctionZ\n      ).map(\n        (p) =>\n          new ColorPoint({ xyz: p, invertedLightness: this._invertedLightness })\n      );\n    });\n  }\n\n  public addAnchorPoint({\n    xyz,\n    color,\n    insertAtIndex,\n  }: ColorPointCollection & { insertAtIndex: number }): ColorPoint {\n    const newAnchor = new ColorPoint({\n      xyz,\n      color,\n      invertedLightness: this._invertedLightness,\n    });\n    if (insertAtIndex) {\n      this.anchorPoints.splice(insertAtIndex, 0, newAnchor);\n    } else {\n      this.anchorPoints.push(newAnchor);\n    }\n    this.updateAnchorPairs();\n    return newAnchor;\n  }\n\n  public removeAnchorPoint({\n    point,\n    index,\n  }: {\n    point?: ColorPoint;\n    index?: number;\n  }): void {\n    if (!point && index === undefined) {\n      throw new Error(\"Must provide a point or index\");\n    }\n\n    let apid;\n\n    if (index !== undefined) {\n      apid = index;\n    } else if (point) {\n      apid = this.anchorPoints.indexOf(point);\n    }\n\n    if (apid > -1 && apid < this.anchorPoints.length) {\n      this.anchorPoints.splice(apid, 1);\n      this.updateAnchorPairs();\n    } else {\n      throw new Error(\"Point not found\");\n    }\n  }\n\n  public updateAnchorPoint({\n    point,\n    pointIndex,\n    xyz,\n    color,\n  }: {\n    point?: ColorPoint;\n    pointIndex?: number;\n  } & ColorPointCollection): ColorPoint {\n    if (pointIndex) {\n      point = this.anchorPoints[pointIndex];\n    }\n\n    if (!point) {\n      throw new Error(\"Must provide a point or pointIndex\");\n    }\n\n    if (!xyz && !color) {\n      throw new Error(\"Must provide a new xyz position or color\");\n    }\n\n    if (xyz) point.position = xyz;\n    if (color) point.hsl = color;\n\n    this.updateAnchorPairs();\n\n    return point;\n  }\n\n  public getClosestAnchorPoint({\n    xyz,\n    hsl,\n    maxDistance = 1,\n  }: {\n    xyz?: PartialVector3;\n    hsl?: PartialVector3;\n    maxDistance?: number;\n  }): ColorPoint | null {\n    if (!xyz && !hsl) {\n      throw new Error(\"Must provide a xyz or hsl\");\n    }\n\n    let distances;\n\n    if (xyz) {\n      distances = this.anchorPoints.map((anchor) =>\n        distance(anchor.position, xyz)\n      );\n    } else if (hsl) {\n      distances = this.anchorPoints.map((anchor) =>\n        distance(anchor.hsl, hsl, true)\n      );\n    }\n\n    const minDistance = Math.min(...distances);\n\n    if (minDistance > maxDistance) {\n      return null;\n    }\n\n    const closestAnchorIndex = distances.indexOf(minDistance);\n\n    return this.anchorPoints[closestAnchorIndex] || null;\n  }\n\n  public set closedLoop(newStatus: boolean) {\n    this.connectLastAndFirstAnchor = newStatus;\n    this.updateAnchorPairs();\n  }\n\n  public get closedLoop(): boolean {\n    return this.connectLastAndFirstAnchor;\n  }\n\n  public set invertedLightness(newStatus: boolean) {\n    this._invertedLightness = newStatus;\n    this.updateAnchorPairs();\n  }\n\n  public get invertedLightness(): boolean {\n    return this._invertedLightness;\n  }\n\n  public get flattenedPoints() {\n    return this.points\n      .flat()\n      .filter((p, i) => (i != 0 ? i % this._numPoints : true));\n  }\n\n  public get colors() {\n    const colors = this.flattenedPoints.map((p) => p.color);\n    if (this.connectLastAndFirstAnchor) {\n      colors.pop();\n    }\n    return colors;\n  }\n\n  public cssColors(mode: \"hsl\" | \"oklch\" | \"lch\" = \"hsl\") {\n    const methods = {\n      hsl: (p) => p.hslCSS,\n      oklch: (p) => p.oklchCSS,\n      lch: (p) => p.lchCSS,\n    };\n    const cssColors = this.flattenedPoints.map(methods[mode]);\n    if (this.connectLastAndFirstAnchor) {\n      cssColors.pop();\n    }\n    return cssColors;\n  }\n\n  public get colorsCSS() {\n    return this.cssColors('hsl');\n  }\n\n  public get colorsCSSlch() {\n    return this.cssColors('lch');\n  }\n\n  public get colorsCSSoklch() {\n    return this.cssColors('oklch');\n  }\n\n  public shiftHue(hShift = 20): void {\n    this.anchorPoints.forEach((p) => p.shiftHue(hShift));\n    this.updateAnchorPairs();\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst { p5 } = globalThis as any;\n\nif (p5) {\n  console.info(\"p5 detected, adding poline to p5 prototype\");\n\n  const poline = new Poline();\n  p5.prototype.poline = poline;\n\n  const polineColors = () =>\n    poline.colors.map(\n      (c) => `hsl(${Math.round(c[0])},${c[1] * 100}%,${c[2] * 100}%)`\n    );\n  p5.prototype.polineColors = polineColors;\n  p5.prototype.registerMethod(\"polineColors\", p5.prototype.polineColors);\n\n  globalThis.poline = poline;\n  globalThis.polineColors = polineColors;\n}\n"],
  "mappings": "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",
  "names": ["t", "invert"]
}
